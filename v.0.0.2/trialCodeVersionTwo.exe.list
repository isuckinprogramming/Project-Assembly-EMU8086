EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
trialCodeVersionTwo.exe -- emu8086 assembler version: 4.08  
 
[ 5/3/2023  --  2:49:52 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       
[   2]        :                                       .model small
[   3]        :                                       .stack 100h
[   4]        :                                       
[   5]        :                                       .data
[   6]    0100: 0A 0D 45 6E 74 65 72 20 66 69 72 73   message1 db 10,13, 'Enter first number: $'
                74 20 6E 75 6D 62 65 72 3A 20 24    
[   7]    0117: 0A 0D 45 6E 74 65 72 20 73 65 63 6F   message2 db 10,13, 'Enter second number: $'
                6E 64 20 6E 75 6D 62 65 72 3A 20 24 
                                                    
[   8]    012F: 0A 0D 31 2E 20 41 64 64 24            message3 db 10,13, '1. Add$'
[   9]    0138: 0A 0D 32 2E 20 53 75 62 74 72 61 63   message4 db 10,13, '2. Subtract$'
                74 24                               
[  10]    0146: 0A 0D 33 2E 20 4D 75 6C 74 69 70 6C   message5 db 10,13, '3. Multiply$'
                79 24                               
[  11]    0154: 0A 0D 34 2E 20 44 69 76 69 64 65 24   message6 db 10,13, '4. Divide$'
                                                    
[  12]    0160: 0A 0D 45 6E 74 65 72 20 79 6F 75 72   message7 db 10,13, 'Enter your choice: $'
                20 63 68 6F 69 63 65 3A 20 24       
[  13]    0176: 0A 0D 52 65 73 75 6C 74 3A 20 24      result db 10,13, 'Result: $'
[  14]        :                                       
[  15]        :                                       .code
[  16]    0190:                                       main proc
[  17]    0190: B8 10 00                              mov ax, @data
[  18]    0193: 8E D8                                 mov ds, ax
[  19]        :                                       
[  20]        :                                       ; Input first number
[  21]    0195: B4 09                                 mov ah, 9
[  22]    0197: BA 00 00                              lea dx, message1
[  23]    019A: CD 21                                 int 21h
[  24]        :                                       
[  25]    019C: B4 01                                 mov ah, 1
[  26]    019E: CD 21                                 int 21h
[  27]    01A0: 2C 30                                 sub al, '0'
[  28]    01A2: 8A D8                                 mov bl, al
[  29]        :                                       
[  30]        :                                       ; Input second number
[  31]    01A4: B4 09                                 mov ah, 9
[  32]    01A6: BA 17 00                              lea dx, message2
[  33]    01A9: CD 21                                 int 21h
[  34]        :                                       
[  35]    01AB: B4 01                                 mov ah, 1
[  36]    01AD: CD 21                                 int 21h
[  37]    01AF: 2C 30                                 sub al, '0'
[  38]    01B1: 8A F8                                 mov bh, al
[  39]        :                                       
[  40]        :                                       ; Display menu
[  41]    01B3: B4 09                                 mov ah, 9
[  42]    01B5: BA 2F 00                              lea dx, message3
[  43]    01B8: CD 21                                 int 21h
[  44]    01BA: BA 38 00                              lea dx, message4
[  45]    01BD: CD 21                                 int 21h
[  46]    01BF: BA 46 00                              lea dx, message5
[  47]    01C2: CD 21                                 int 21h
[  48]    01C4: BA 54 00                              lea dx, message6
[  49]    01C7: CD 21                                 int 21h
[  50]        :                                       
[  51]        :                                       ; Input choice
[  52]    01C9: B4 09                                 mov ah, 9
[  53]    01CB: BA 60 00                              lea dx, message7
[  54]    01CE: CD 21                                 int 21h
[  55]        :                                       
[  56]    01D0: B4 01                                 mov ah, 1
[  57]    01D2: CD 21                                 int 21h
[  58]    01D4: 2C 30                                 sub al, '0'
[  59]        :                                       
[  60]        :                                       ; Perform arithmetic operation based on choice
[  61]    01D6: 3C 01                                 cmp al, 1
[  62]    01D8: 74 0E                                 je add_numbers
[  63]    01DA: 3C 02                                 cmp al, 2
[  64]    01DC: 74 10                                 je subtract_numbers
[  65]    01DE: 3C 03                                 cmp al, 3
[  66]    01E0: 74 12                                 je multiply_numbers
[  67]    01E2: 3C 04                                 cmp al, 4
[  68]    01E4: 74 14                                 je divide_numbers
[  69]    01E6: EB 36                                 jmp exit_program
[  70]        :                                       
[  71]    01E8:                                       add_numbers:
[  72]    01E8: 8B C3                                 mov ax, bx
[  73]    01EA: 03 C2                                 add ax, dx
[  74]    01EC: EB 13                                 jmp display_result
[  75]        :                                       
[  76]    01EE:                                       subtract_numbers:
[  77]    01EE: 8B C3                                 mov ax, bx
[  78]    01F0: 2B C2                                 sub ax, dx
[  79]    01F2: EB 0D                                 jmp display_result
[  80]        :                                       
[  81]    01F4:                                       multiply_numbers:
[  82]    01F4: 8B C3                                 mov ax, bx
[  83]    01F6: F7 E2                                 mul dx
[  84]    01F8: EB 07                                 jmp display_result
[  85]        :                                       
[  86]    01FA:                                       divide_numbers:
[  87]    01FA: 8B C3                                 mov ax, bx
[  88]    01FC: 99                                    cwd
[  89]    01FD: F7 F2                                 div dx
[  90]    01FF: EB 00                                 jmp display_result
[  91]        :                                       
[  92]    0201:                                       display_result:
[  93]        :                                       ; Display result
[  94]    0201: B4 09                                 mov ah, 9
[  95]    0203: BA 76 00                              lea dx, result
[  96]    0206: CD 21                                 int 21h
[  97]        :                                       
[  98]    0208: 8A C4                                 mov al, ah
[  99]    020A: 04 30                                 add al, '0'
[ 100]    020C: B4 02                                 mov ah, 2
[ 101]    020E: 8A D0                                 mov dl, al
[ 102]    0210: CD 21                                 int 21h
[ 103]        :                                       
[ 104]    0212: 8A C3                                 mov al, bl
[ 105]    0214: 04 30                                 add al, '0'
[ 106]    0216: B4 02                                 mov ah, 2
[ 107]    0218: 8A D0                                 mov dl, al
[ 108]    021A: CD 21                                 int 21h
[ 109]        :                                       
[ 110]    021C: EB 00                                 jmp exit_program
[ 111]        :                                       
[ 112]    021E:                                       exit_program:
[ 113]    021E: B4 4C                                 mov ah, 4ch
[ 114]    0220: CD 21                                 int 21h
[ 115]        :                                       main endp
[ 116]        :                                       end main
[ 117]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 22      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 03      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: DD      -   check sum (l.byte)
0013: 03      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 19      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 19      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
