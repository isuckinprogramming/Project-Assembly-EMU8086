EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
firstTrial.exe -- emu8086 assembler version: 4.08  
 
[ 5/2/2023  --  2:23:18 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       
[   2]        :                                       .model small
[   3]        :                                       .stack 100h
[   4]        :                                       
[   5]        :                                       .data
[   6]    0100: 45 6E 74 65 72 20 66 69 72 73 74 20   message1 db 'Enter first number: $'
                6E 75 6D 62 65 72 3A 20 24          
[   7]    0115: 45 6E 74 65 72 20 73 65 63 6F 6E 64   message2 db 'Enter second number: $'
                20 6E 75 6D 62 65 72 3A 20 24       
[   8]    012B: 31 2E 20 41 64 64 24                  message3 db '1. Add$'
[   9]    0132: 32 2E 20 53 75 62 74 72 61 63 74 24   message4 db '2. Subtract$'
                                                    
[  10]    013E: 33 2E 20 4D 75 6C 74 69 70 6C 79 24   message5 db '3. Multiply$'
                                                    
[  11]    014A: 34 2E 20 44 69 76 69 64 65 24         message6 db '4. Divide$'
[  12]    0154: 45 6E 74 65 72 20 79 6F 75 72 20 63   message7 db 'Enter your choice: $'
                68 6F 69 63 65 3A 20 24             
[  13]    0168: 52 65 73 75 6C 74 3A 20 24            result db 'Result: $'
[  14]        :                                       
[  15]        :                                       .code
[  16]    0180:                                       main proc
[  17]    0180: B8 10 00                              mov ax, @data
[  18]    0183: 8E D8                                 mov ds, ax
[  19]        :                                       
[  20]        :                                       ; Input first number
[  21]    0185: B4 09                                 mov ah, 9
[  22]    0187: BA 00 00                              lea dx, message1
[  23]    018A: CD 21                                 int 21h
[  24]        :                                       
[  25]    018C: B4 01                                 mov ah, 1
[  26]    018E: CD 21                                 int 21h
[  27]    0190: 2C 30                                 sub al, '0'
[  28]    0192: 8A D8                                 mov bl, al
[  29]        :                                       
[  30]        :                                       ; Input second number
[  31]    0194: B4 09                                 mov ah, 9
[  32]    0196: BA 15 00                              lea dx, message2
[  33]    0199: CD 21                                 int 21h
[  34]        :                                       
[  35]    019B: B4 01                                 mov ah, 1
[  36]    019D: CD 21                                 int 21h
[  37]    019F: 2C 30                                 sub al, '0'
[  38]    01A1: 8A F8                                 mov bh, al
[  39]        :                                       
[  40]        :                                       ; Display menu
[  41]    01A3: B4 09                                 mov ah, 9
[  42]    01A5: BA 2B 00                              lea dx, message3
[  43]    01A8: CD 21                                 int 21h
[  44]    01AA: BA 32 00                              lea dx, message4
[  45]    01AD: CD 21                                 int 21h
[  46]    01AF: BA 3E 00                              lea dx, message5
[  47]    01B2: CD 21                                 int 21h
[  48]    01B4: BA 4A 00                              lea dx, message6
[  49]    01B7: CD 21                                 int 21h
[  50]        :                                       
[  51]        :                                       ; Input choice
[  52]    01B9: B4 09                                 mov ah, 9
[  53]    01BB: BA 54 00                              lea dx, message7
[  54]    01BE: CD 21                                 int 21h
[  55]        :                                       
[  56]    01C0: B4 01                                 mov ah, 1
[  57]    01C2: CD 21                                 int 21h
[  58]    01C4: 2C 30                                 sub al, '0'
[  59]        :                                       
[  60]        :                                       ; Perform arithmetic operation based on choice
[  61]    01C6: 3C 01                                 cmp al, 1
[  62]    01C8: 74 0E                                 je add_numbers
[  63]    01CA: 3C 02                                 cmp al, 2
[  64]    01CC: 74 10                                 je subtract_numbers
[  65]    01CE: 3C 03                                 cmp al, 3
[  66]    01D0: 74 12                                 je multiply_numbers
[  67]    01D2: 3C 04                                 cmp al, 4
[  68]    01D4: 74 14                                 je divide_numbers
[  69]    01D6: EB 36                                 jmp exit_program
[  70]        :                                       
[  71]    01D8:                                       add_numbers:
[  72]    01D8: 8B C3                                 mov ax, bx
[  73]    01DA: 03 C2                                 add ax, dx
[  74]    01DC: EB 13                                 jmp display_result
[  75]        :                                       
[  76]    01DE:                                       subtract_numbers:
[  77]    01DE: 8B C3                                 mov ax, bx
[  78]    01E0: 2B C2                                 sub ax, dx
[  79]    01E2: EB 0D                                 jmp display_result
[  80]        :                                       
[  81]    01E4:                                       multiply_numbers:
[  82]    01E4: 8B C3                                 mov ax, bx
[  83]    01E6: F7 E2                                 mul dx
[  84]    01E8: EB 07                                 jmp display_result
[  85]        :                                       
[  86]    01EA:                                       divide_numbers:
[  87]    01EA: 8B C3                                 mov ax, bx
[  88]    01EC: 99                                    cwd
[  89]    01ED: F7 F2                                 div dx
[  90]    01EF: EB 00                                 jmp display_result
[  91]        :                                       
[  92]    01F1:                                       display_result:
[  93]        :                                       ; Display result
[  94]    01F1: B4 09                                 mov ah, 9
[  95]    01F3: BA 68 00                              lea dx, result
[  96]    01F6: CD 21                                 int 21h
[  97]        :                                       
[  98]    01F8: 8A C4                                 mov al, ah
[  99]    01FA: 04 30                                 add al, '0'
[ 100]    01FC: B4 02                                 mov ah, 2
[ 101]    01FE: 8A D0                                 mov dl, al
[ 102]    0200: CD 21                                 int 21h
[ 103]        :                                       
[ 104]    0202: 8A C3                                 mov al, bl
[ 105]    0204: 04 30                                 add al, '0'
[ 106]    0206: B4 02                                 mov ah, 2
[ 107]    0208: 8A D0                                 mov dl, al
[ 108]    020A: CD 21                                 int 21h
[ 109]        :                                       
[ 110]    020C: EB 00                                 jmp exit_program
[ 111]        :                                       
[ 112]    020E:                                       exit_program:
[ 113]    020E: B4 4C                                 mov ah, 4ch
[ 114]    0210: CD 21                                 int 21h
[ 115]        :                                       main endp
[ 116]        :                                       end main
[ 117]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 12      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 03      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 6B      -   check sum (l.byte)
0013: 78      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 18      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 18      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
